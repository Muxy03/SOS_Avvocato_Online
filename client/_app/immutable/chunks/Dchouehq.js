function c(e,n){return e&&e.trim()?e.trim().split(" ").map(o=>o[0]).join("").toUpperCase().slice(0,2):n.charAt(0).toUpperCase()}async function l(e){const n=await i();if(n){for(const o in e)Object.keys(n).includes(o)&&(n[o]=e[o]);await fetch("/api/session",{method:"POST",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)})}}async function f(){await fetch("/api/session",{method:"DELETE",credentials:"same-origin"})}async function i(){const e=await fetch("/api/session",{method:"GET",credentials:"same-origin"});return e.status===200?await e.json():null}function d(){"serviceWorker"in navigator?window.addEventListener("load",async()=>{try{const e=await navigator.serviceWorker.register("/service-worker.js");console.log("Service Worker registered successfully:",e.scope),e.addEventListener("updatefound",()=>{const n=e.installing;n?.addEventListener("statechange",()=>{n.state==="installed"&&navigator.serviceWorker.controller&&t()})}),navigator.serviceWorker.addEventListener("message",n=>{s(n.data)}),window.addEventListener("online",()=>{console.log("App came online"),navigator.serviceWorker.controller&&navigator.serviceWorker.controller.postMessage({type:"ONLINE"})}),window.addEventListener("offline",()=>{console.log("App went offline"),r()})}catch(e){console.error("Service Worker registration failed:",e)}}):console.log("Service Worker not supported")}function s(e){switch(e.type){case"OFFLINE_REQUEST_SYNCED":console.log("Offline request synced:",e.data),a(),window.dispatchEvent(new CustomEvent("offlineRequestSynced",{detail:e.data}));break;default:console.log("Unknown message from service worker:",e)}}function t(){confirm("A new version of the app is available. Reload to update?")&&window.location.reload()}function r(){console.log("App is offline - some features may be limited"),window.dispatchEvent(new CustomEvent("appOffline"))}function a(){console.log("Offline requests have been synced"),window.dispatchEvent(new CustomEvent("offlineRequestsSynced"))}export{f as c,c as g,d as r,l as s};
